@using MamalianLib;
@{
    ViewBag.Title = "Play";
}
@model MamalianASP.Models.CharacterPlayModel

<h2>Play - @Model.Player.Name</h2>
<p><b>WASD</b> - Move</p>
<p><b>Space</b> - Attack</p>
<center>
    <canvas id="canvas" style="border:1px solid #000; width: 1000px; height:400px"></canvas>
</center>
<script>
    var canvas = document.getElementById("canvas"), ctx = canvas.getContext("2d");
    var player = new Player(120, 400, 200, 3, 0.75);
    var maxWidth = 1000;
    var maxHeight = 400;
    canvas.height = maxHeight;
    canvas.width = maxWidth;

    //Wave Related
    var wave = 1;
    var waves;
    var currentWave;
    var enemies = new Array(5);
    var startedWave = false;
    var introTime = 180;
    var defeatedEnemies = 0;

    function StartWave() {
        if (!startedWave) {
            var p = @Html.Raw(Json.Encode(Model.Player));
            player = new Player(p.Stats.Health, 400, 200, 3, 0.75);

            currentWave = @Html.Raw(Json.Encode(Model.FirstWave));
            var e = currentWave.Enemies;
            for (var i = 0; i < e.length; i++) {
                var entry = e[i];

                var enemy = new Enemy(20,
                    Math.floor((Math.random() * maxWidth - 15) + 1),
                    Math.floor((Math.random() * maxHeight - 15) + 1),
                    Math.floor((Math.random() * 2) + 1));
                if (entry.Stats !== null) {
                    enemy.health = entry.Stats.Health;
                }
                enemies[i] = enemy;
            }
            startedWave = true;
        }
    }

    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    function Rectangle(x, y, w, h) {
        this.left = x;
        this.top = y;
        this.right = x + w;
        this.bottom = y + h;
        this.center = new Point(this.left + (this.right - this.left) / 2, this.top + (this.bottom - this.top) / 2);
    }
    Rectangle.prototype.contains = function(other) {
        return (other.left >= this.left &&
            other.right <= this.right &&
            other.top >= this.top &&
            other.bottom <= this.bottom);
    }

    function ShowWaveStart() {
        ctx.font = "30px Arial";
        ctx.fillText("Start wave 1!", 10, 50);
    }

    function ShowDefeat() {
        ctx.fillStyle = "#FF0000";
        ctx.font = "30px Arial";
        ctx.fillText("You have died!", 10, 50);
        ctx.font = "12px Arial";
        ctx.fillText("To try again, please refresh!", 10, 90);
    }

    function ShowWin() {
        ctx.fillStyle = "#000";
        ctx.font = "30px Arial";
        ctx.fillText("You have won!", 10, 50);
        ctx.font = "12px Arial";
        ctx.fillText("To play again, please refresh!", 10, 90);
    }

    //Player
    function Player(health, x, y, speed, friction) {
        this.health = health;
        this.x = x;
        this.y = y;
        this.velY = 0;
        this.velX = 0;
        this.speed = speed;
        this.friction = friction;
        this.keys = [];
        this.currentAttackSpeed = 0;
        this.attackSpeed = 45;
        this.rectWidth = 20;
        this.rectHeight = 20;
        this.hitboxWidth = 10;
        this.hitboxHeight = 10;
        this.reach = new Rectangle(x, y, this.rectWidth, this.rectHeight);
        this.hitbox = new Rectangle(x, y, this.hitboxWidth, this.hitboxHeight);
    }
    Player.prototype.Update = function (enemy) {
        if (this.health >= 0) {
            this.Movement();
            this.reach = new Rectangle(this.x, this.y, this.rectWidth, this.rectHeight);
            this.hitbox = new Rectangle(this.x, this.y, this.hitboxWidth, this.hitboxHeight);
            this.currentAttackSpeed--;
                if (this.keys[32]) {
                    if (this.currentAttackSpeed <= 0) {
                        for (var i = 0; i < enemy.length; i++) {
                            if (this.reach.contains(enemy[i].hitbox)) {
                                console.log("player made contact with enemy " + i);
                                this.Attack(enemy[i]);
                                this.currentAttackSpeed = this.attackSpeed;
                            }
                        }
                    }
                }
            }
    }
    Player.prototype.Draw = function () {
        if (this.health >= 0) {
            //Health
            ctx.fillStyle = "#000";
            ctx.font = "12px Arial";
            ctx.fillText("Health: " + this.health, 15, 15);
            //Sprite
            ctx.fillStyle = "#FF0F0F";
            ctx.fillRect(this.reach.left, this.reach.top, this.rectWidth, this.rectHeight);
            ctx.fillStyle = "#FFF000";
            ctx.fillRect(this.hitbox.left, this.hitbox.top, this.hitboxWidth, this.hitboxHeight);
            ctx.fillStyle = "#000";
            ctx.arc(this.x, this.y, 5, 0, Math.PI * 2);
            ctx.fill();
        }
    }
    Player.prototype.Movement = function () {
        //Up, Down, Left, Right
        if (this.keys[38] || this.keys[87]) { if (this.velY > -this.speed) { this.velY--; } }
        if (this.keys[40] || this.keys[83]) { if (this.velY < this.speed) { this.velY++; } }
        if (this.keys[39] || this.keys[68]) { if (this.velX < this.speed) { this.velX++; } }
        if (this.keys[37] || this.keys[65]) { if (this.velX > -this.speed) { this.velX--; } }

        this.velY *= this.friction;
        this.y += this.velY;
        this.velX *= this.friction;
        this.x += this.velX;

        if (this.x >= maxWidth - 5) { this.x = maxWidth - 5; } else if (this.x <= 5) { this.x = 5; }
        if (this.y >= maxHeight - 5) { this.y = maxHeight - 5; } else if (this.y < 5) { this.y = 5; }
    }
    Player.prototype.Attack = function(enemy) {
        enemy.health -= 500;
    }

    //Enemies
    function Enemy(health, x, y, speed) {
        this.health = health;
        //Movement
        this.x = x;
        this.y = y;
        this.velX = 0;
        this.velY = 0;
        this.speed = speed;
        this.friction = 0.9;
        this.attackSpeed = 0;
        this.rectWidth = 20;
        this.rectHeight = 20;
        this.hitWidth = 10;
        this.hitHeight = 10;
        this.reach = new Rectangle(x - this.rectWidth / (5 / 2), y - this.rectWidth / (5 / 2), this.rectWidth, this.rectHeight);
        this.hitbox = new Rectangle(x - this.hitWidth / (5 / 2), y - this.hitWidth / (5 / 2), this.hitWidth, this.hitHeight);
    }
    Enemy.prototype.Update = function (player) {
        if (this.health > 0) {
            this.Movement(player);
            this.reach = new Rectangle(this.x, this.y, this.rectWidth, this.rectHeight);
            this.hitbox = new Rectangle(this.x, this.y, this.hitWidth, this.hitHeight);
        }
    }
    Enemy.prototype.Draw = function () {
        if (this.health > 0) {
            ctx.fillStyle = "#FF00FF";
            ctx.fillRect(this.reach.left, this.reach.top, this.rectWidth, this.rectHeight);
            ctx.fillStyle = "#00FF00";
            ctx.fillRect(this.hitbox.left, this.hitbox.top, this.hitboxWidth, this.hitboxHeight);
            ctx.fillStyle = "#FF0000";
            ctx.fillRect(this.x, this.y, 10, 10);
        }
    }
    Enemy.prototype.Movement = function (player) {
        var speedY = this.speed;
        var speedX = this.speed;
        //Move up and down
        if (this.x < player.x) { this.velX = speedX;
        } else if (this.x > player.x) { this.velX = -speedX;
        } else { this.velX = 0;
        }
        //Move left and right
        if (this.y < player.y) { this.velY = speedY;
        } else if (this.y > player.y) { this.velY = -speedY;
        } else { this.velY = 0;
        }
        this.attackSpeed--;
        if (this.attackSpeed <= 0) {
            if (this.reach.contains(player.hitbox)) {
                console.log("Enemy made contact");
                this.Attack(player);
//                alert("Enemy made contact");
                this.attackSpeed = 90;
            }
        }
        this.x = Math.round(this.x + this.velX);
        this.y = Math.round(this.y + this.velY);
    }
    Enemy.prototype.Attack = function(player) {
        player.health -= 20;
    }

    function update() {
        requestAnimationFrame(update);
        if (player.health >= 0) {
            defeatedEnemies = 0;
            if (introTime <= 0) {
                player.Update(enemies);
                StartWave();
                for (var i = 0; i < enemies.length; i++) {
                    if (enemies[i].health >= 0) {
                        enemies[i].Update(player);
                    } else {
                        defeatedEnemies++;
                    }
                }
            }
        }
        Draw();
    }

    function Draw() {
        //player
        ctx.clearRect(0, 0, maxWidth, maxHeight);
        ctx.beginPath();
        if (player.health >= 0) {

            if (defeatedEnemies >= 5) {
                ShowWin();
            } else {
                if (!startedWave && introTime >= 0) {
                    ShowWaveStart();
                    introTime--;
                } else {
                    ctx.fillStyle = "#FFFF00";
                    player.Draw();
                    for (var i = 0; i < enemies.length; i++) {
                        if (enemies[i].health >= 0) {
                            enemies[i].Draw();
                        }
                    }
                }    
            }
        } else {
            ShowDefeat();
        }
    }

    update();

    document.body.addEventListener("keydown", function (e) { player.keys[e.keyCode] = true; });
    document.body.addEventListener("keyup", function (e) { player.keys[e.keyCode] = false; });
</script>